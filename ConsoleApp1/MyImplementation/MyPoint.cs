namespace ConsoleApp1.MyImplementation
{
    public class MyPoint
    {
        public MyBigInteger X;
        public MyBigInteger Y;
        public readonly MyCurve Curve;

        public bool IsInfinite => X is null && Y is null;

        public MyPoint(MyBigInteger x, MyBigInteger y, MyCurve curve)
        {
            X = x;
            Y = y;
            Curve = curve;
        }

        public MyPoint Negate()
        {
            var point = new MyPoint(X, Y.Negate(), Curve);
            point.IsOnCurve();
            return point;
        }

        private static MyPoint Add(MyPoint leftOperand, MyPoint rightOperand)
        {
            if (leftOperand.IsInfinite) return rightOperand;
            if (rightOperand.IsInfinite) return leftOperand;

            var curve = leftOperand.Curve;
            var lambda = GetLambdaForAddition(leftOperand, rightOperand)%curve.Prime;
            var newX = (lambda ^ 2) - leftOperand.X - rightOperand.X;
            newX = newX % curve.Prime;
            var newY = lambda * (leftOperand.X - newX) - leftOperand.Y;

            newY = newY % curve.Prime;

            var newPoint = new MyPoint(newX, newY, curve);
            newPoint.IsOnCurve();
            return newPoint;
        }

        private MyPoint Double()
        {
            if (IsInfinite) return this;

            var lambda = GetLambdaForDoubling()%Curve.Prime;
            var newX = (lambda ^ 2) - X*2;
            newX = newX % Curve.Prime;
            var newY = (lambda * (X - newX)) - Y;

            newY = newY % Curve.Prime;

            var newPoint = new MyPoint(newX, newY, Curve);
            newPoint.IsOnCurve();
            return newPoint;
        }

        private static MyPoint MultiplyByScalar(MyPoint point, MyBigInteger scalar)
        {
            var result = new MyPoint(null, null, point.Curve);

            while (scalar != 0)
            {
                if (scalar % 2 == 1)
                {
                    result = result + point;
                    scalar--;
                }
                else
                {
                    point = point.Double();
                    scalar = scalar / 2;
                }
            }

            return result;
        }

        private static MyBigInteger GetLambdaForAddition(MyPoint leftOperand, MyPoint rightOperand)
        {
            return (rightOperand.Y - leftOperand.Y) * (rightOperand.X - leftOperand.X).ModInverse(rightOperand.Curve.Prime);
        }

        private MyBigInteger GetLambdaForDoubling()
        {
            return (3*(X^2) + Curve.A) * (Y*2).ModInverse(Curve.Prime);
        }

        public static MyPoint operator +(MyPoint leftOperand, MyPoint rightOperand)
        {
            return Add(leftOperand, rightOperand);
        }

        public static MyPoint operator *(MyPoint leftOperand, MyBigInteger scalar)
        {
            return MultiplyByScalar(leftOperand, scalar);
        }

        public static MyPoint operator *(MyBigInteger scalar, MyPoint leftOperand)
        {
            return MultiplyByScalar(leftOperand, scalar);
        }

        public void IsOnCurve()
        {
            Curve.IsPointOnCurve(this);
        }

        public override string ToString()
        {
            if (X is null && Y is null)
                return "(None, None)";
            return $"({X}, {Y})";
        }
    }
}
