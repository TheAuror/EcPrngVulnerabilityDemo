using System.Linq;

namespace ConsoleApp1.MyImplementation
{
    public class MyGenerator
    {
        private MyPoint _pointP;
        private MyPoint _pointQ;

        private MyBigInteger _state;

        public MyGenerator(int initialState = 1)
        {
            _state = 1;
            var curve = MyCurve.GetP256NistCurve();

            _pointQ = curve.CreatePointAt(NistConstants.P256.Qx, NistConstants.P256.Qy) * initialState;
            _pointP = _pointQ * MyConstants.P256.Secret;
        }

        public MyGenerator(MyPoint pointQ)
        {
            _pointQ = pointQ;
            _pointP = _pointQ * MyConstants.P256.Secret;

            _state = _pointP.X;
        }

        public MyBigInteger GetNextRandomValue()
        {
            _pointP = _pointP * _state;

            _state = _pointP.X;

            _pointQ = _pointQ * _state;

            var qx = _pointQ.X;

            var phiQx = qx.AsByteArray.Value;
            if (Globals.Q is null) Globals.Q = _pointQ;
            if (Globals.P is null) Globals.P = _pointP;
            else Globals.SecondP = _pointP;
            phiQx = phiQx.Take(phiQx.Length - MyConstants.P256.CutBytes).ToArray();

            return new MyBigInteger(phiQx);
        }

        public MyBigInteger GetNextFakeValue()
        {
            _state = _pointP.X;

            _pointQ = _pointQ * _state;

            var qx = _pointQ.X;

            var phiQx = qx.AsByteArray.Value;

            phiQx = phiQx.Take(phiQx.Length - MyConstants.P256.CutBytes).ToArray();

            return new MyBigInteger(phiQx);
        }

        public void Reseed(MyBigInteger seed)
        {
            _state = seed;
        }
    }
}