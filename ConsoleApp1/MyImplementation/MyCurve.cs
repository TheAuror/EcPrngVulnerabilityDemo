using System;
using System.Collections.Generic;
using System.Linq;

namespace ConsoleApp1.MyImplementation
{
    public class MyCurve
    {
        public readonly MyBigInteger A;
        private readonly MyBigInteger _b;
        public readonly MyBigInteger Prime;

        public MyCurve(MyBigInteger a, MyBigInteger b, MyBigInteger prime)
        {
            A = a;
            _b = b;
            Prime = prime;
        }

        public static MyCurve GetP256NistCurve()
        {
            return new MyCurve(NistConstants.P256.A, NistConstants.P256.B, NistConstants.P256.Prime);
        }

        public bool IsPointOnCurve(MyPoint point)
        {
            return IsPointOnCurve(point.X, point.Y);
        }

        public bool IsPointOnCurve(MyBigInteger x, MyBigInteger y)
        {
            var result = x.ModPow(3, Prime) + A * x + _b - y.ModPow(2, Prime);
            if (result % Prime == new MyBigInteger(0f)) return true;
            throw new Exception();
        }

        public MyPoint CreatePointAt(MyBigInteger x, MyBigInteger y)
        {
            IsPointOnCurve(x, y);
            return new MyPoint(x, y, this);
        }

        public List<MyPoint> GetPointsAt(MyBigInteger x)
        {
            var ySquared = (x*x*x%Prime + (A * x) + _b) % Prime;
            var y = ySquared.ModSqrt(Prime);

            var result = new List<MyPoint>();
            
            y.Where(e => IsPointOnCurve(x, e))
             .Take(1)
             .ForEach(e => result.Add(CreatePointAt(x, e)));

            return result;
        }
    }
}
