using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Diagnostics;
using ConsoleApp1.MyImplementation;

namespace ConsoleApp1.PrngCracker
{
    public class GeneratorCracker
    {
        private readonly Queue<MyBigInteger> _randomValues;

        private readonly ConcurrentQueue<List<MyPoint>> _generatedPointBatches;

        public GeneratorCracker(MyBigInteger first)
        {
            var curve = MyCurve.GetP256NistCurve();
            _randomValues = new Queue<MyBigInteger>();

            _generatedPointBatches = new PointGenerator(curve, first).GeneratePoints();
        }

        public void FeedNextRandomValue(MyBigInteger randomValue)
        {
            _randomValues.Enqueue(randomValue);

            FindRealPoint(_generatedPointBatches);
        }

        private void FindRealPoint(ConcurrentQueue<List<MyPoint>> batches)
        {
            var randomValue = _randomValues.Dequeue();
            var stopwatch = new Stopwatch();
            stopwatch.Start();
            while (batches.TryDequeue(out List<MyPoint> batch))
            {
                foreach (var point in batch)
                {
                    var generator = new MyGenerator(point);
                    var generatedValue = generator.GetNextRandomValue(false);

                    if (generatedValue != randomValue) continue;

                    Console.WriteLine("Cracked");
                    Console.WriteLine($"{stopwatch.Elapsed}");
                    return;
                }
            }
        }
    }
}
