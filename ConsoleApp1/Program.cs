using System;
using System.Collections.Generic;
using DualEcPRNGDemo.MyImplementation;
using DualEcPRNGDemo.PrngCracker;

namespace DualEcPRNGDemo
{
    public class Program
    {
        public static Generator Generator;
        public static GeneratorCracker Cracker;

        public static Queue<BigInteger> GeneratedValueQueue;

        public static void Main()
        {
            //var test = new BigInteger(44402f)
            //    .ModSqrt(100049)
            //    .Select(e => e.ToString() + " ")
            //    .DefaultIfEmpty("No solution")
            //    .Aggregate((s, s1) => s + s1);
            //Console.WriteLine(test);
            //Console.ReadLine();
            //GenerateRandomValue();
            //GenerateRandomValue();
            //CrackTheGenerator();
            //CrackTheGenerator();

            while (true)
            {
                var command = Console.ReadLine();

                switch (command)
                {
                    case "gen":
                        GenerateRandomValue();
                        break;
                    case "crack":
                        CrackTheGenerator();
                        break;
                    case "quit":
                        return;
                    default:
                        Console.WriteLine("Command not found!");
                        break;
                }
            }
        }

        private static void GenerateRandomValue()
        {
            if(Generator is null)
                Generator = new Generator();

            if(GeneratedValueQueue is null)
                GeneratedValueQueue = new Queue<BigInteger>();

            var randomNumber = Generator.GetNextRandomValue();

            Console.WriteLine($"Generated number: {randomNumber}");

            GeneratedValueQueue.Enqueue(randomNumber);
        }

        private static void CrackTheGenerator()
        {
            if (GeneratedValueQueue.IsEmpty())
            {
                Console.WriteLine("Generate a random value first!");
                return;
            }

            if (Cracker is null)
            {
                Cracker = new GeneratorCracker(GeneratedValueQueue.Dequeue());
                return;
            }

            Cracker.FeedNextRandomValue(GeneratedValueQueue.Dequeue());
        }
    }
}
